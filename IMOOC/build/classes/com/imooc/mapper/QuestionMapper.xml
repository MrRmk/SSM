<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd" >  

<!--namespace就是与此文件对应的Dao接口的全路径-->  
<mapper namespace="com.imooc.dao.IQuestionDao" >

	<!--如下type的Question就是mybatis-config.xml中配置的Question-->  
  <resultMap id="BaseResultMap" type="Question" > 
  
  	<!-- column是数据库字段类型，property是实体类类型    jdbcType是数据库类型  -->
    <id column="question_id" property="questionId" jdbcType="INTEGER" />  
    <result column="user_id" property="userId" jdbcType="VARCHAR" />  
    <result column="course_id" property="courseId" jdbcType="INTEGER" />  
    <result column="small_chapter_id" property="smallChapterId" jdbcType="INTEGER" />
    <result column="question_title" property="questionTitle" jdbcType="VARCHAR" />
    <result column="question_content" property="questionContent" jdbcType="VARCHAR" />
    <result column="question_time" property="questionTime" jdbcType="TIMESTAMP" />
    <result column="question_reply_number" property="questionReplyNumber" jdbcType="INTEGER" />
    <result column="question_scan_number" property="questionScanNumber" jdbcType="INTEGER" />
    
    <!-- 一对一：评论表中包含用户表 -->
    <!-- collection中不是javaType而是ofType,通过property也知道是list，即多个 ; 
    	property就是Chapter实体类里面包含的小节list对象; 
    	ofType就是包含的对象的映射路径，即包名+类名,此处由于在mybatis-config.xml中配置过，所以直接用user-->
    <association property="user" javaType="com.imooc.entity.User">  
    	<id column="user_id" property="userId" jdbcType="VARCHAR" />  
	    <result column="user_password" property="userPassword" jdbcType="VARCHAR" />  
	    <result column="user_photo" property="userPhoto" jdbcType="VARCHAR" />  
	    <result column="user_nickname" property="userNickName" jdbcType="VARCHAR" />  
	    <result column="user_realname" property="userRealName" jdbcType="VARCHAR" />  
	    <result column="user_sex" property="userSex" jdbcType="VARCHAR" />  
	    <result column="user_summary" property="userSummary" jdbcType="VARCHAR" />  
	    <result column="user_qq" property="userQQ" jdbcType="VARCHAR" />  
	    <result column="user_school" property="userSchool" jdbcType="VARCHAR" />  
	    <result column="user_education" property="userEducation" jdbcType="VARCHAR" />  
	    <result column="user_qualification" property="userQualification" jdbcType="VARCHAR" />  
	    <result column="user_position" property="userPosition" jdbcType="VARCHAR" />  
	    <result column="user_register_time" property="userRegisterTime" jdbcType="TIMESTAMP" /> 
	    <result column="user_status" property="userStatus" jdbcType="INTEGER" />   
	</association>
	
    <!-- 一对一：评论表中包含小节表 -->
    <!-- <association property="smallChapter" javaType="com.imooc.entity.SmallChapter">
    	<id column="small_chapter_id" property="smallChapterId" jdbcType="INTEGER" />  
    	<result column="chapter_id" property="chapterId" jdbcType="INTEGER" />  
    	<result column="small_chapter_order" property="smallChapterOrder" jdbcType="INTEGER" />  
    	<result column="small_chapter_title" property="smallChapterTitle" jdbcType="VARCHAR" />  
    	<result column="video_path" property="videoPath" jdbcType="VARCHAR" />
    	<result column="video_totaltime" property="videoTotalTime" jdbcType="VARCHAR" />
	</association> -->
	
	<!-- 一对一：评论表中包含章节表 -->
    <!-- <association property="chapter" javaType="com.imooc.entity.Chapter">
    	<id column="chapter_id" property="chapterId" jdbcType="INTEGER" />  
	    <result column="course_id" property="courseId" jdbcType="INTEGER" />  
	    <result column="chapter_order" property="chapterOrder" jdbcType="INTEGER" />  
	    <result column="chapter_title" property="chapterTitle" jdbcType="VARCHAR" />
	</association> -->
    
  </resultMap> 
   
	<!--查询sql:  查询所有的提问表的数据  -->  
	<select id="selectAllQuestion" resultMap="BaseResultMap">  
	  	select * FROM question
	  	order by question_time DESC, question_scan_number DESC, question_reply_number DESC  
	</select>  
	
	<!--查询sql:  查询所有的提问表的数据(关联了提问表+用户表)*****分页 -->  
	<select id="selectAllQuestionAndUser" resultMap="BaseResultMap">  
	  	<!-- 关联了提问表+用户表 -->
		select q.*, u.*
		from question q, user u
		where q.user_id = u.user_id 
		order by q.question_time DESC, q.question_scan_number DESC, question_reply_number DESC
		limit #{first},#{pageSize}
	</select> 
	
	<!--查询sql:  查询所有的提问表的数据的总页数  -->  
	<select id="selectAllQuestionAndUserTotal" resultType="int">  
	  	<!-- 关联了提问表+用户表 -->
		select  count(*)
		from question q, user u
		where q.user_id = u.user_id 
	</select>
	
	<!--查询sql:  通过用户id  查询该用户提出的所有问题表的数据(关联了评论表+用户表)  -->  
	<select id="selectAllQuestionByUserId" resultMap="BaseResultMap" parameterType="java.lang.String">  
	  	<!-- 关联了提问表+用户表 -->
		select q.*, u.*
		from question q, user u
		where q.user_id = u.user_id and u.user_id = #{userId,jdbcType=VARCHAR}
		order by q.question_time DESC, q.question_scan_number DESC, question_reply_number DESC
	</select> 
	
	<!--查询sql:  通过用户id  查询该用户提出的所有问题的总个数  -->  
	<select id="getQuestionNumberByUserId" resultType="int" parameterType="java.lang.String">  
	  	<!-- 关联了提问表+用户表 -->
		select count(*)
		from question q, user u
		where q.user_id = u.user_id and u.user_id = #{userId,jdbcType=VARCHAR}
	</select> 
  
	<sql id="Base_Column_List" >  
	  	question_id, user_id, course_id, small_chapter_id, question_title, question_content, question_time, question_reply_number, question_scan_number 
	</sql>  
  
	<!-- 查询sql:  通过提问id 获得一个提问表 对象   -->
	<select id="getQuestion" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
		select * 
		from question  
		where question_id = #{questionId,jdbcType=INTEGER}  
	</select>  
	
	<!-- 查询sql:  通过提问id 获得一个提问表 对象(关联了提问表+用户表)   -->
	<select id="getQuestionAndUser" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
		select q.*, u.*  
		from question q, user u 
		where q.user_id = u.user_id and question_id = #{questionId,jdbcType=INTEGER} 
	</select>  
	
	<!-- 查询sql:  通过课程id查找   提问表的集合(关联了问题表+用户表+小节表+章节表)      -->
	<select id="getAllQuestionByCourseId" resultMap="BaseResultMap" parameterType="int">
		<!-- 原生的:只有提问表数据，没有关联其他表 -->
		<!-- select * 
		from question  
		where course_id = #{courseId} order by question_time DESC, question_scan_number DESC, question_reply_number DESC -->
		
		<!-- 关联了提问表+用户表+小节表+章节表 -->
		select q.*, u.*, small.* , chapter.*
		from question q, user u, small_chapter small,chapter
		where q.course_id = #{courseId} and q.user_id = u.user_id and q.small_chapter_id = small.small_chapter_id and chapter.chapter_id = small.chapter_id
		order by q.question_time DESC, q.question_scan_number DESC, q.question_reply_number DESC
	</select> 
	
	<!-- 查询sql:  通过课程id查找   提问表的集合(关联了问题表+用户表 )      -->
	<select id="getQuestionByCourseId" resultMap="BaseResultMap" parameterType="int">
		<!-- 关联了提问表+用户表 -->
		select q.*, u.*
		from question q, user u
		where q.course_id = #{courseId} and q.user_id = u.user_id 
		order by q.question_time DESC, q.question_scan_number DESC, q.question_reply_number DESC
	</select> 
	
	<!-- 查询sql:  通过课程id和小节id查找   提问表的集合      -->
	<select id="getAllQuestionByCourseIdAndSmallChapterId" resultMap="BaseResultMap">
		select   
		<include refid="Base_Column_List" />  
		from question  
		where course_id = #{courseId,jdbcType=INTEGER} and small_chapter_id = #{smallChapterId,jdbcType=INTEGER} 
	</select> 
	
	<!-- 查询sql:  通过课程id查找   该课程的提问数量      -->
	<select id="getQuestionNumberByCourseId" resultType="int" parameterType="int">
		select count(*)
		from question  
		where course_id = #{courseId,jdbcType=INTEGER} 
	</select> 

	<!-- 添加问题： 增加一条提问记录(字段可为空)   -->
	<insert id="addQuestion" parameterType="Question">
		insert into question
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="questionId != null"> question_id, </if>
			<if test="userId != null"> user_id, </if>
			<if test="courseId != null"> course_id, </if>
			<if test="smallChapterId != null"> small_chapter_id, </if>
			<if test="questionTitle != null"> question_title, </if>
			<if test="questionContent != null"> question_content, </if>
			<if test="questionTime != null"> question_time, </if>
			<if test="questionReplyNumber != null"> question_reply_number, </if>
			<if test="questionScanNumber != null"> question_scan_number, </if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="questionId != null">  #{questionId,jdbcType=INTEGER}, </if>
			<if test="userId != null"> #{userId,jdbcType=VARCHAR}, </if>
			<if test="courseId != null"> #{courseId,jdbcType=INTEGER}, </if>
			<if test="smallChapterId != null"> #{smallChapterId,jdbcType=INTEGER}, </if>
			<if test="questionTitle != null"> #{questionTitle,jdbcType=VARCHAR}, </if>
			<if test="questionContent != null"> #{questionContent,jdbcType=VARCHAR}, </if>
			<if test="questionTime != null"> #{questionTime,jdbcType=TIMESTAMP}, </if>
			<if test="questionReplyNumber != null"> #{questionReplyNumber,jdbcType=INTEGER}, </if>
			<if test="questionScanNumber != null"> #{questionScanNumber,jdbcType=INTEGER}, </if>
		</trim>
	</insert>
	
	<!-- 删除问题:	通过问题id  删除一条提问记录   -->
	 <delete id="deleteQuestion" parameterType="int" >  
	   delete from question  
	   where question_id = #{questionId,jdbcType=INTEGER}  
	 </delete>  
	 
	 <!-- 更新sql:  -->
	 <update id="updateQuestion" parameterType="Question" >  
	   update question  
	   <set >   
	     <if test="userId != null" >  
	       user_id = #{userId,jdbcType=VARCHAR},  
	     </if>  
	     <if test="courseId != null" >  
	       course_id = #{courseId,jdbcType=INTEGER},  
	     </if> 
	     <if test="smallChapterId != null" >  
	       small_chapter_id = #{smallChapterId,jdbcType=INTEGER},  
	     </if>  
	     <if test="questionTitle != null" >  
	       question_title = #{questionTitle,jdbcType=VARCHAR},  
	     </if>
	     <if test="questionContent != null" >  
	       question_content = #{questionContent,jdbcType=VARCHAR},  
	     </if>
	     <if test="questionTime != null" >  
	       question_time = #{questionTime,jdbcType=TIMESTAMP},  
	     </if> 
	     <if test="questionReplyNumber != null" >  
	       question_reply_number = #{questionReplyNumber,jdbcType=INTEGER}  
	     </if> 
	     <if test="questionScanNumber != null" >  
	       question_scan_number = #{questionScanNumber,jdbcType=INTEGER}  
	     </if> 
	   </set>  
	   where question_id = #{questionId,jdbcType=INTEGER}  
	 </update>
	 
	 <!-- 更新sql:  通过问题id 将 问题的浏览量+1-->
	 <update id="updateQuestionScanNumber" parameterType="int" >  
	   update question   
	   set 	question_time = question_time, 
	   		question_scan_number = question_scan_number + 1
	   where question_id = #{questionId,jdbcType=INTEGER}  
	 </update>
	 
	 <!-- 更新sql:  通过问题id 将 问题的回答量+1-->
	 <update id="updateQuestionReplyNumber" parameterType="int" >  
	   update question   
	   set 	question_time = question_time, 
	   		question_reply_number = question_reply_number + 1
	   where question_id = #{questionId,jdbcType=INTEGER}  
	 </update>

</mapper>  
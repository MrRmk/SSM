<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd" >  

<!--namespace就是与此文件对应的Dao接口的全路径-->  
<mapper namespace="com.imooc.dao.IReplyDao" >
   
   <!--如下type的Reply就是mybatis-config.xml中配置的Reply-->  
  	<resultMap id="BaseResultMap" type="Reply" >  
  
	  	<!-- column是数据库字段类型，property是实体类类型    jdbcType是数据库类型   -->
	    <id column="reply_id" property="replyId" jdbcType="INTEGER" />  
	    <result column="user_id" property="userId" jdbcType="VARCHAR" />  
	    <result column="question_id" property="questionId" jdbcType="INTEGER" />
	    <result column="reply_content" property="replyContent" jdbcType="VARCHAR" />   
	    <result column="reply_time" property="replyTime" jdbcType="TIMESTAMP" /> 
	    <result column="reply_agree_number" property="replyAgreeNumber" jdbcType="INTEGER" /> 
	    <result column="reply_against_number" property="replyAgainstNumber" jdbcType="INTEGER" /> 
	    
	<!-- 一对一：评论表中包含用户表 -->
    <!-- collection中不是javaType而是ofType,通过property也知道是list，即多个 ; 
    	property就是Chapter实体类里面包含的小节list对象; 
    	ofType就是包含的对象的映射路径，即包名+类名,此处由于在mybatis-config.xml中配置过，所以直接用user-->
    <association property="user" javaType="com.imooc.entity.User">  
    	<id column="user_id" property="userId" jdbcType="VARCHAR" />  
	    <result column="user_password" property="userPassword" jdbcType="VARCHAR" />  
	    <result column="user_photo" property="userPhoto" jdbcType="VARCHAR" />  
	    <result column="user_nickname" property="userNickName" jdbcType="VARCHAR" />  
	    <result column="user_realname" property="userRealName" jdbcType="VARCHAR" />  
	    <result column="user_sex" property="userSex" jdbcType="VARCHAR" />  
	    <result column="user_summary" property="userSummary" jdbcType="VARCHAR" />  
	    <result column="user_qq" property="userQQ" jdbcType="VARCHAR" />  
	    <result column="user_school" property="userSchool" jdbcType="VARCHAR" />  
	    <result column="user_education" property="userEducation" jdbcType="VARCHAR" />  
	    <result column="user_qualification" property="userQualification" jdbcType="VARCHAR" />  
	    <result column="user_position" property="userPosition" jdbcType="VARCHAR" />  
	    <result column="user_register_time" property="userRegisterTime" jdbcType="TIMESTAMP" /> 
	    <result column="user_status" property="userStatus" jdbcType="INTEGER" />   
	</association>
	    
  	</resultMap>
   
	<!--查询sql:  查询所有的回复表的数据  -->  
	<select id="selectAllReply" resultType="com.imooc.entity.Reply">  
	  	select * FROM reply;  
	</select>  
  
	<sql id="Base_Column_List" >  
	  	reply_id, user_id, question_id, reply_content, reply_time, reply_agree_number, reply_against_number
	</sql>  
	
	<!-- 查询sql:  通过用户id 获取该用户所有的回答记录   -->
	<select id="selectAllReplyByUserId" resultMap="BaseResultMap" parameterType="java.lang.String" >
		select r.*, u.*
		from reply r, user u
		where r.user_id = u.user_id and u.user_id = #{userId,jdbcType=VARCHAR} 
		order by reply_time DESC, reply_agree_number DESC 
	</select> 
	
	<!-- 查询sql:  通过用户id 获取该用户所有的回答记录总数   -->
	<select id="getReplyNumberByUserId" resultType="int" parameterType="java.lang.String" >
		select count(*)
		from reply r, user u
		where r.user_id = u.user_id and u.user_id = #{userId,jdbcType=VARCHAR} 
	</select>   
  
	<!-- 查询sql:  通过回复id 获得一个回复表 对象   -->
	<select id="getReply" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
		select r.*, u.*
		from reply r, user u
		where r.user_id = u.user_id and reply_id = #{replyId,jdbcType=INTEGER}  
	</select>  
	
	<!-- 查询sql:  通过问题id查找   回复表的集合       -->
	<select id="getAllReplyByQuestionId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select r.*, u.*
		from reply r, user u
		where r.user_id = u.user_id and question_id = #{questionId,jdbcType=INTEGER}
	</select> 
	
	<!-- 查询sql:  通过问题id查找   回复表中有多少问答个数      -->
	<select id="getReplyCountByQuestionId" resultType="int" parameterType="int">
		select count(*)
		from reply  
		where question_id = #{questionId,jdbcType=INTEGER} 
	</select> 
	
	<!-- 查询sql:  通过课程id查找   该课程所有问题的回复数量      -->
	<select id="getReplyNumberByCourseId" resultType="int" parameterType="int">
		select count(*)
		from reply, question 
		where course_id = #{courseId,jdbcType=INTEGER} and reply.question_id = question.question_id
	</select>
	
	 <!-- 添加回复： 增加一条回复记录(字段可为空)   -->
	<insert id="addReply" parameterType="Reply">
		insert into reply
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="replyId != null"> reply_id, </if>
			<if test="userId != null"> user_id, </if>
			<if test="questionId != null"> question_id, </if>
			<if test="replyContent != null"> reply_content, </if>
			<if test="replyTime != null"> reply_time, </if>
			<if test="replyAgreeNumber != null"> reply_agree_number, </if>
			<if test="replyAgainstNumber != null"> reply_against_number, </if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="replyId != null">  #{replyId,jdbcType=INTEGER}, </if>
			<if test="userId != null"> #{userId,jdbcType=VARCHAR}, </if>
			<if test="questionId != null"> #{questionId,jdbcType=INTEGER}, </if>
			<if test="replyContent != null"> #{replyContent,jdbcType=VARCHAR}, </if>
			<if test="replyTime != null"> #{replyTime,jdbcType=TIMESTAMP}, </if>
			<if test="replyAgreeNumber != null"> #{replyAgreeNumber,jdbcType=INTEGER}, </if>
			<if test="replyAgainstNumber != null"> #{replyAgainstNumber,jdbcType=INTEGER}, </if>
		</trim>
	</insert>
	
	<!-- 删除回复:	通过回复id  删除一条回复记录   -->
	 <delete id="deleteReply" parameterType="int" >  
	   delete from reply  
	   where reply_id = #{replyId,jdbcType=INTEGER}  
	 </delete>  
	 
	 <!-- 更新sql:  -->
	 <update id="updateReply" parameterType="Reply" >  
	   update reply  
	   <set >   
	     <if test="userId != null" >  
	       user_id = #{userId,jdbcType=VARCHAR},  
	     </if>  
	     <if test="questionId != null" >  
	       question_id = #{questionId,jdbcType=INTEGER},  
	     </if> 
	     <if test="replyContent != null" >  
	       reply_content = #{replyContent,jdbcType=VARCHAR},  
	     </if>  
	     <if test="replyTime != null" >  
	       reply_time = #{replyTime,jdbcType=TIMESTAMP},  
	     </if>
	     <if test="replyAgreeNumber != null" >  
	       reply_agree_number = #{replyAgreeNumber,jdbcType=INTEGER},  
	     </if>
	     <if test="replyAgainstNumber != null" >  
	       reply_against_number = #{replyAgainstNumber,jdbcType=INTEGER},  
	     </if> 
	   </set>  
	   where reply_id = #{replyId,jdbcType=INTEGER}  
	 </update>

</mapper>  